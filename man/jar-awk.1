.TH JAR-AWK 1 "May 4, 2014" 
.SH NAME
.PP
jar-awk - read multiline records from a file or standard input and
process them with Ruby
.SH SYNOPSIS
.PP
jar-awk [-t] -l REGEX [-F REGEX] [-b RUBY_SCRIPT] [-e RUBY_SCRIPT] (-f
RUBY_PATH | RUBY_SCRIPT) [JAR_INPUT] ...
.SH DESCRIPTION
.PP
\f[C]jar-awk\f[] processes multiline records in a file or input stream.
The records are separated by lines which match the REGEX expression
specified by the \f[C]-l\f[] (\f[C]--line-delimiter\f[]) flag.
.PP
\f[C]jar-awk\f[] processes two formats: \f[C]cookie\ jars\f[] and
\f[C]record\ jars\f[].
These terms from the section on data file formats in the
\f[C]The\ Art\ of\ Unix\ Programming\f[].
.PP
In the cookie jar format, the records are just strings of text that can
contain new lines.
\f[C]jar-awk\f[] sets the variable \f[C]$_\f[] to each record in turn.
These cookie jars have nothing to do with browser cookies.
.PP
If the \f[C]-F\f[] (\f[C]--field-delimiter\f[]) flag is used, the input
is assumed to be in record jar format.
Each line of the record contains a key-value pair.
The argument of the \f[C]-F\f[] flag is a REGEX which is used to split
the line in two.
\f[C]jar-awk\f[] sets \f[C]$_\f[] to a Ruby hash containing the
key-value pairs.
.PP
The Ruby script can be provided on the command line to do something with
\f[C]$_\f[] for each record.
Optionally, the \f[C]-f\f[] flag can be used to read the Ruby script
from a file.
.PP
Some cookie jar files and record jar files may put interesting
information on the delimiter line.
The match data for the delimiter line is put in the variable
\f[C]$md\f[].
If the regular expression contained groups, these are available in
\f[C]$md[1]\f[], \f[C]$md[2]\f[], and so on.
The entire matched expression is in \f[C]$md[0]\f[], and what came
before and after it is in \f[C]$md.pre_match\f[] and
\f[C]$md.post_match\f[].
.PP
Because \f[C]jar-awk\f[] is implemented with \f[C]eval\f[] instead of
\f[C]ruby\ -e\f[], \f[C]BEGIN\f[] and \f[C]END\f[] blocks are not
supported.
To specify blocks of Ruby code which execute at the begin and end of
execution, use the \f[C]-B\f[] (\f[C]--BEGIN\f[]) and \f[C]-E\f[]
(\f[C]--END\f[]) flags.
.SH OPTIONS
.PP
-B RUBY_SCRIPT, --BEGIN=RUBY_SCRIPT : execute Ruby script provided as
argument before processing records
.PP
-E RUBY_SCRIPT, --END=RUBY_SCRIPT : execute Ruby script provided as
argument after processing records
.PP
-f PATH, --file=PATH : execute the Ruby script in the file at PATH.
.PP
-F REGEX, --field-delimiter=REGEX : the regular expression
.PP
-l REGEX, --line-delimiter=REGEX : a regular expression for identifying
the
.PP
-t, --trim : Trim whitespace on the edge of records.
If -F flag is specified, trim whitespace on the edge of keys and values.
.SH EXAMPLES
.PP
On Mac OS X, list the sections of the \f[C]system_profiler\f[] output:
.IP
.nf
\f[C]
system_profiler\ -detailLevel\ mini\ |\ grep\ -v\ \[aq]^\\s*$\[aq]\ |\ jar-awk\ -l\ \[aq]^(\\S+):\[aq]\ \[aq]puts\ $md[1]\[aq]
\f[]
.fi
.PP
On Mac OS X, extract the \f[C]Software\f[] section of the
\f[C]system_profiler\f[] output:
.IP
.nf
\f[C]
system_profiler\ -detailLevel\ mini\ |\ grep\ -v\ \[aq]^\\s*$\[aq]\ |\ jar-awk\ -l\ \[aq]^(\\S+):\[aq]\ \[aq]puts\ $_\ if\ $md[1]\ ==\ "Software"\[aq]
\f[]
.fi
.PP
One Mac OS X, extract the \f[C]System\ Version\f[] from the
\f[C]Software\f[] section of the \f[C]system_profiler\f[] output:
.IP
.nf
\f[C]
system_profiler\ -detailLevel\ mini\ |\ grep\ -v\ \[aq]^\\s*$\[aq]\ |\ jar-awk\ -t\ -F\ \[aq]:\[aq]\ -l\ \[aq]^(\\S+):\[aq]\ \[aq]puts\ $_["System\ Version"]\ if\ $md[1]\ ==\ "Software"\[aq]
\f[]
.fi
.SH SEE ALSO
.PP
\f[C]awk\f[] (1)
.PP
\f[C]csplit\f[] (1)
.PP
http://www.catb.org/esr/writings/taoup/html/ch05s02.html
.SH AUTHORS
Clark Grubb.
